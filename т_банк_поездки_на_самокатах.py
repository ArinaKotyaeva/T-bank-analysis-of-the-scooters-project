# -*- coding: utf-8 -*-
"""Т_Банк_поездки_на_самокатах.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19ThuT1oqi_rX2y6WKQceEGJh748G0puX
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('kicksharing.csv')

print(df.info())
print(df.describe())
print(df.isnull().sum())

df.head()

df.isna().sum()

"""**Нахождение средних значений**"""

average_cost = df['nominal_price_rub_amt'].mean()
print(f"Средняя стоимость поездки: {average_cost:.2f} руб.")

distances = df['distance_km'].values
mean_dist = sum(distances) / len(distances)

print(f"Среднее расстояние: {mean_dist:.1f} км.")

age = df["age"].values
mean_age = sum(age) / len(age)

print(f"Средний возраст: {mean_age:.1f}")

start_time = pd.to_datetime(df["book_start_dttm"])
finish_time = pd.to_datetime(df["book_end_dttm"])

razn = finish_time - start_time
razn = razn.dt.total_seconds() / 60
print(f"Среднее время поездки: {(sum(razn.values) / len(razn)):.2f} мин.")

days_of_week = []

for i in df["book_end_dttm"].values:
  days_of_week.append(i[:10])

from datetime import datetime

week = []

for i in days_of_week:
  date_obj = datetime.strptime(i, '%Y-%m-%d').date()

  weekday_number = date_obj.weekday()

  weekday_name = date_obj.strftime('%A')

  week.append(weekday_name)

week = pd.Series({
    "Monday": week.count("Monday"),
    "Tuesday": week.count("Tuesday"),
    "Wednesday": week.count("Wednesday"),
    "Thursday": week.count("Thursday"),
    "Friday": week.count("Friday"),
    "Saturday": week.count("Saturday"),
    "Sunday": week.count("Sunday"),
})

"""# Анализ ключевых метрик

1. Распределение стоимости поездок
"""

plt.figure(figsize=(10,6))
sns.histplot(df['nominal_price_rub_amt'], bins=50, kde=True)
plt.title('Распределение стоимости поездок')
plt.xlabel('Стоимость поездки')
plt.ylabel('Количество поездок')
plt.xlim(0, 600)
plt.show()

"""2. Распределение длительности поездок"""

df['duration_min'] = (pd.to_datetime(df['book_end_dttm']) - pd.to_datetime(df['book_start_dttm'])).dt.total_seconds() / 60

plt.figure(figsize=(10,6))
sns.histplot(df['duration_min'], bins=50, kde=True)
plt.title('Распределение длительности поездок')
plt.xlabel('Длительность поездки (минуты)')
plt.ylabel('Количество поездок')
plt.xlim(0, 70)
plt.show()

"""3. Распределение расстояний поездок"""

sns.set_style("whitegrid")
plt.figure(figsize=(10, 6))
sns.histplot(df['distance_km'], bins=30, kde=True, color='skyblue')
plt.title('Распределение расстояний поездок (км)')
plt.xlabel('Расстояние (км)')
plt.ylabel('Количество поездок')
plt.xlim(0, 300)
plt.show()

f = df['distance_km'].values
print(len(f))

"""4. Количество поездок по дням недели"""

plt.figure(figsize=(12, 6))
sns.barplot(x=week.index, y=week.values)
plt.title('Количество поездок по дням недели')
plt.xlabel('День недели')
plt.ylabel('Количество поездок')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""# Анализ по демографическим признакам

1. Распределение по возрасту
"""

plt.figure(figsize=(10,6))
sns.histplot(df['age'], bins=30, kde=True)
plt.title('Распределение пользователей по возрасту')
plt.xlabel('Возраст')
plt.ylabel('Количество поездок')
plt.show()

"""2. Распределение по полу"""

gender_counts = df['gender_cd'].value_counts()
plt.figure(figsize=(6,6))
plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%')
plt.title('Распределение поездок по полу')
plt.show()

"""# Анализ по моделям самоката"""

model_counts = df['transport_model'].value_counts()
plt.figure(figsize=(10,6))
sns.barplot(x=model_counts.index, y=model_counts.values)
plt.title('Распределение поездок по моделям самокатов')
plt.xlabel('Модель самоката')
plt.ylabel('Количество поездок')
plt.xticks(rotation=45)
plt.show()

"""## Анализ по регионам"""

top_regions = df['lvn_state_nm'].value_counts().head(10)
plt.figure(figsize=(12,6))
sns.barplot(x=top_regions.index, y=top_regions.values)
plt.title('Топ-10 регионов по количеству поездок')
plt.xlabel('Регион')
plt.ylabel('Количество поездок')
plt.xticks(rotation=45)
plt.show()

"""# Анализ кэшбэка"""

plt.figure(figsize=(10,6))
sns.scatterplot(x='nominal_price_rub_amt', y='loyalty_accrual_rub_amt', data=df)
plt.title('Зависимость кэшбэка от стоимости поездки')
plt.xlabel('Стоимость поездки')
plt.ylabel('Кэшбэк')
plt.show()

df['start_hour'] = pd.to_datetime(df['local_book_start_dttm']).dt.hour

plt.figure(figsize=(12,6))
sns.countplot(x='start_hour', data=df, palette='viridis')
plt.title('Распределение поездок по часам суток')
plt.xlabel('Час начала поездки')
plt.ylabel('Количество поездок')
plt.grid(True)
plt.show()

"""Анализ по семейному статусу"""

plt.figure(figsize=(12, 5))
sns.boxplot(data=df, x='marital_status_cd', y='duration_min')
plt.title('Длительность поездок по семейному статусу')
plt.xlabel('Семейный статус')
plt.ylabel('Длительность (мин)')
plt.xticks(rotation=45)
plt.show()